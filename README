Serial SPI Explorer
===================
Originally by:
Joby Taffey <jrt@hodgepig.org>
http://blog.hodgepig.org

Changes and extensions by:
Paul Sokolovsky <pfalcon@users.sourceforge.net>

See bottom of document for changes since the original version.


A serial port SPI interface for the TI Launchpad. Following the Bus Pirate command syntax.

[   assert chip select
]   deassert chip select
<number>    write byte (0x/h prefix for hex 0b/b prefix for binary)
r   read a byte
:n  repeat command n times

Eg.

[ b111:4 0x20 10:2 r:64 ]
    Assert CS
    Write 7 7 7 7
    Write 32
    Write 10 10
    Read 64 bytes
    Deassert CS

Example
-------
Controlling a Microchip MCP23S17 SPI 16-bit I/O expander:

MCP23S17  | Launchpad
----------|----------
VDD       | VCC
VSS       | GND
SO        | MISO (P1.7)
SI        | MOSI (P1.6)
CS        | CS (P1.4)
SCK       | SCLK (P1.5)
Reset     | VCC

Wire LEDs to the 8 GPIOA lines.

Initialise the chip for non-sequential access:
[0x40 0x0A 0x28]    # WR_REG(0) IOCONA      SEQ_OFF|HAEN

Set all of PORTA as outputs:
[0x40 0x00 0x00]    # WR_REG(0) GPIOADIR    ALL_OUTPUT

Set a pattern on GPIOA LEDs
[0x40 0x12 b10000001]    # WR_REG(0) GPIOA       GPIOA-0

Serial port
-----------
TX on P1.1
RX on P1.2
9600bps 8-N-1

SPI 
---
Chip Select P1.4
MOSI P1.6
MISO P1.7
SCLK P1.5


Changes since the original version
==================================
1. Code optimized for size (some functions rewritten, got rid of uint32_t).
2. Command parsing code rewritten to optimize for size and fix memory overrun
   issues.
3. "{" command (duplex SPI transfer) implemented.
4. "echo off"/"echo on" commands implemented. Echo off is useful for
   programmatical accel, to workaround inherent duplex problems with MSP430
   soft-UART (i.e. soft UART cannot reliably work in duplex mode).
5. Implemented "HiZ" bus state, and set as default on start, like the original
   Bus Pirate. In this mode, all port pins not used for host communication are
   set to input, which makes them be hi-Z if seen as outputs (of course, some
   port pins have external pull-ups in Launchpad). In this mode, user has full
   control of all pins (see below). This mode can be (re)entered with "hiz"
   command.
6. SPI mode should be explicitly selected with "spi" command.
7. Implemented commands to access port pins:
   * read:  pN.M?     e.g.: p1.2?
   * write: pN.M=0|1  e.g.: p1.0=1
8. Bus mode support was made more "plugin" and object oriented (WIP), with the
   hope to ease adding more bus modes (new bus modes unlikely will fit into
   lowy 2Kb of msp430g2231 of the original Launchpad 1.4, but the idea is to
   make them compile-time selectable, and Launchpad 1.5's MCU should have
   enough room for lot of things).

TODO: Implement explicit "pinmode pN.M in|out" command to set pin direction.
Currently, direction is set automatically based on pN.M? or pN.M= command,
but that in worst case lead to port burn out in case of mistake.
